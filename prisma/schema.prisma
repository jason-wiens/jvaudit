// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}


model MarketingContacts {
  id                  Int           @id @default(autoincrement())
  email               String        @unique
  name                String
  company             String
  comments            String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Tenant {
  tenantId            String        @id @default(uuid())
  fullLegalName       String
  shortName           String
  address             String?
  billingInfo         Json
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  users               User[]
  companies           Company[]
  people              Person[]
  audits              Audit[]
  resources           Resource[]
  scopes              Scope[]
  employees           Employee[]
  stakeholders        Stakeholder[]
  irs                 InformationRequest[]
  irMessages          IrMessage[]
  workspaces          Workspace[]
  statistics          Statistic[]
}

model Workspace {
  workspaceId         String        @id @default(uuid())
  tenantId            String
  type                WorkspaceType
  name                String
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  tenantDefault       Boolean       @default(false)

  tenant              Tenant        @relation(fields: [tenantId], references: [tenantId])
  audits              Audit[]
  statistics          Statistic[]
  defaultForUsers     User[]
}

model Statistic {
  id                  Int           @id @default(autoincrement())
  tenantId            String
  data                Json
  function            String
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  workspaceId         String
  userId              String

  tenant              Tenant        @relation(fields: [tenantId], references: [tenantId])
  workspace           Workspace     @relation(fields: [workspaceId], references: [workspaceId])
  user                User          @relation(fields: [userId], references: [userId])
}

model Person {
  personId            String        @id @default(uuid())
  tenantId            String
  email               String    
  firstName           String
  lastName            String
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  active              Boolean       @default(true)
  activeDate          DateTime      @default(now())

  tenant              Tenant        @relation(fields: [tenantId], references: [tenantId])
  employeeDetails     Employee?     

  @@unique([tenantId, email])
}

model User {
  userId              String        @id @default(uuid())
  tenantId            String
  username            String        @unique
  password            String
  forcePasswordChange Boolean       @default(true)
  avatarUrl           String?
  admin               Boolean       @default(false)
  superUser           Boolean       @default(false)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  active              Boolean       @default(true)
  activeDate          DateTime      @default(now())
  profileId           String        @unique
  defaultWorkspaceId  String
  
  defaultWorkspace    Workspace     @relation(fields: [defaultWorkspaceId], references: [workspaceId])
  statistics          Statistic[]
  tenant              Tenant        @relation(fields: [tenantId], references: [tenantId])
  profile             Employee      @relation(fields: [profileId], references: [employeeId])
}

model Employee {
  employeeId          String        @id @default(uuid())
  tenantId            String
  personId            String        @unique
  companyId           String
  primaryContact      Boolean       @default(false)
  position            String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  active              Boolean       @default(true)
  activeDate          DateTime      @default(now())

  userDetails         User?    
  tenant              Tenant        @relation(fields: [tenantId], references: [tenantId])
  personalProfile     Person        @relation(fields: [personId], references: [personId])
  employerProfile     Company       @relation(fields: [companyId], references: [companyId])
  resourceFor         Resource[]
  irsSubmitted        InformationRequest[] @relation(name: "author")
  irsReceived         InformationRequest[] @relation(name: "submittedTo")
  irMessages          IrMessage[]
}

model Company {
  companyId           String        @id @default(uuid())
  tenantId            String
  fullLegalName       String
  shortName           String
  address             String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  active              Boolean       @default(true)
  activeDate          DateTime      @default(now())
  
  tenant              Tenant        @relation(fields: [tenantId], references: [tenantId])
  employees           Employee[]    
  stakeholderIn       Stakeholder[] 

  @@unique([tenantId, shortName])
  @@unique([tenantId, fullLegalName])
}

model Stakeholder {
  stakeholderId       String        @id @default(uuid())
  tenantId            String
  auditId             String
  companyId           String
  type                StakeholderType
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  tenant              Tenant        @relation(fields: [tenantId], references: [tenantId])
  audit               Audit         @relation(fields: [auditId], references: [auditId], onDelete: Cascade)
  company             Company       @relation(fields: [companyId], references: [companyId])
}

model Audit {
  auditId             String        @id @default(uuid())
  tenantId            String
  auditNumber         String
  auditDescription    String
  status              AuditStatus   @default(CREATED)
  statusDate          DateTime      @default(now())
  active              Boolean       @default(true)
  activeDate          DateTime      @default(now())
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  fieldworkStart      DateTime?
  fieldworkEnd        DateTime?
  totalBudgetHours    Int?
  workspaceId         String

  workspace           Workspace     @relation(fields: [workspaceId], references: [workspaceId])
  tenant              Tenant        @relation(fields: [tenantId], references: [tenantId])
  stakeholders        Stakeholder[]     
  resources           Resource[]
  scopes              Scope[]
  irs                 InformationRequest[]

  @@unique([tenantId, auditNumber])
}

model Resource {
  resourceId          String        @id @default(uuid())
  tenantId            String
  type                ResourceType
  description         String?
  budgetHours         Int?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  active              Boolean       @default(true)
  activeDate          DateTime      @default(now())
  employeeId          String
  auditId             String
  assignedToId        String?    
  
  tenant              Tenant        @relation(fields: [tenantId], references: [tenantId])
  employee            Employee      @relation(fields: [employeeId], references: [employeeId])
  audit               Audit         @relation(fields: [auditId], references: [auditId], onDelete: Cascade)
  assignedTo          Scope?        @relation(fields: [assignedToId], references: [scopeId])

}


model Scope {
  scopeId             String        @id @default(uuid())
  tenantId            String
  type                ScopeType
  budgetHours         Int?
  description         String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  active              Boolean       @default(true)
  activeDate          DateTime      @default(now())
  auditId             String
  fieldworkStart      DateTime?
  fieldworkEnd        DateTime?

  tenant              Tenant        @relation(fields: [tenantId], references: [tenantId])
  resources           Resource[]
  audit               Audit         @relation(fields: [auditId], references: [auditId], onDelete: Cascade)
}

model InformationRequest {
  irId               String         @id @default(uuid())
  tenantId           String
  auditId            String
  number             Int
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  submittedDate      DateTime?
  submitted          Boolean        @default(false)
  authorId           String
  costCenterAFE      String?
  property           String?
  subject            String?
  subjectDetails     String?
  body               String?
  actionRequested    String?
  grossAmount        Float          @default(0)
  netAmount          Float          @default(0)
  resolved           Boolean        @default(false)
  resolvedDate       DateTime?
  active              Boolean       @default(true)
  activeDate          DateTime      @default(now())

  submittedTo        Employee[]      @relation(name: "submittedTo") 
  author             Employee        @relation(name: "author", fields: [authorId], references: [employeeId])
  tenant             Tenant          @relation(fields: [tenantId], references: [tenantId])
  audit              Audit           @relation(fields: [auditId], references: [auditId], onDelete: Cascade)
  correspondence     IrMessage[]
  @@unique([auditId, number])
}

model IrMessage {
  messageId          String         @id @default(uuid())
  tenantId           String
  authorId           String
  irId               String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  body               String

  author             Employee       @relation(fields: [authorId], references: [employeeId])
  tenant             Tenant         @relation(fields: [tenantId], references: [tenantId])
  ir                 InformationRequest @relation(fields: [irId], references: [irId], onDelete: Cascade)
}

enum AuditStatus {
  CREATED
  CONFIRMED
  FIELDWORK
  REPORTING
  SUBMITTED
  RESPONSE
  CLOSED
  CANCELLED
}

enum ResourceType {
  AUDITOR
  AUDIT_CONTACT_OPERATOR
  AUDIT_CONTACT_NON_OPERATOR
  MANAGER
  OBSERVER
}

enum ScopeType {
  CAPITAL_EXPENDITURES
  OPERATING_EXPENSES
  PRODUCTION_ALLOCATIONS
  EQUALIZATIONS
  FEES
  FEE_INCOME
  MARKETING
  MANAGEMENT
  ADMINISTRATION
}

enum StakeholderType {
  OPERATOR
  AUDIT_LEAD
  AUDIT_PARTICIPANT
  NON_OP_OWNER
  SERVICE_PROVIDER
}

enum WorkspaceType {
  INCOMING
  OUTGOING
  INTERNAL
}



